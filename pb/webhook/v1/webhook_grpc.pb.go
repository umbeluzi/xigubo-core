// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: webhook/v1/webhook.proto

package providerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebhookSenderService_SendWebhook_FullMethodName = "/provider.v1.WebhookSenderService/SendWebhook"
)

// WebhookSenderServiceClient is the client API for WebhookSenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookSenderServiceClient interface {
	SendWebhook(ctx context.Context, in *WebhookSendRequest, opts ...grpc.CallOption) (*WebhookSendResponse, error)
}

type webhookSenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookSenderServiceClient(cc grpc.ClientConnInterface) WebhookSenderServiceClient {
	return &webhookSenderServiceClient{cc}
}

func (c *webhookSenderServiceClient) SendWebhook(ctx context.Context, in *WebhookSendRequest, opts ...grpc.CallOption) (*WebhookSendResponse, error) {
	out := new(WebhookSendResponse)
	err := c.cc.Invoke(ctx, WebhookSenderService_SendWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookSenderServiceServer is the server API for WebhookSenderService service.
// All implementations should embed UnimplementedWebhookSenderServiceServer
// for forward compatibility
type WebhookSenderServiceServer interface {
	SendWebhook(context.Context, *WebhookSendRequest) (*WebhookSendResponse, error)
}

// UnimplementedWebhookSenderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWebhookSenderServiceServer struct {
}

func (UnimplementedWebhookSenderServiceServer) SendWebhook(context.Context, *WebhookSendRequest) (*WebhookSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhook not implemented")
}

// UnsafeWebhookSenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookSenderServiceServer will
// result in compilation errors.
type UnsafeWebhookSenderServiceServer interface {
	mustEmbedUnimplementedWebhookSenderServiceServer()
}

func RegisterWebhookSenderServiceServer(s grpc.ServiceRegistrar, srv WebhookSenderServiceServer) {
	s.RegisterService(&WebhookSenderService_ServiceDesc, srv)
}

func _WebhookSenderService_SendWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookSenderServiceServer).SendWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookSenderService_SendWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookSenderServiceServer).SendWebhook(ctx, req.(*WebhookSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookSenderService_ServiceDesc is the grpc.ServiceDesc for WebhookSenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookSenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.v1.WebhookSenderService",
	HandlerType: (*WebhookSenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWebhook",
			Handler:    _WebhookSenderService_SendWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook/v1/webhook.proto",
}
